# 这是一个帮助您开始使用 Actions 的基础工作流

name: 多包发布流程

# 控制工作流何时运行
on:
  # 仅在推送或拉取请求事件时触发工作流，但仅限于指定分支
  push:
    branches: ['test', 'feat/**', 'main']
  pull_request:
    branches: ['test', 'feat/**', 'main']

  # 允许您从 Actions 选项卡手动运行此工作流
  workflow_dispatch:
    inputs:
      job_type:
        description: '选择要执行的任务'
        required: true
        default: 'snapshot-publish'
        type: choice
        options:
          - 'check-releases-packages'
          - 'production-publish-pkg'

# 工作流运行由一个或多个可以顺序或并行运行的任务组成

# 设置工作流权限
permissions:
  contents: write # 允许读写仓库内容
  packages: write # 允许发布包
  pull-requests: write # 允许创建 PR

jobs:
  # 快照版本发布任务
  snapshot-publish:
    runs-on: ubuntu-latest
    # 在手动触发选择 snapshot-publish 或推送到 test/feat/* 分支时运行
    if: |
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.job_type == 'snapshot-publish' || github.event.inputs.job_type == '')) ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/test' || startsWith(github.ref, 'refs/heads/feat/')))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 获取完整的 git 历史，changeset 需要
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.15.4'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Print versions
        run: |
          echo "📋 工具版本信息："
          echo "Node.js: $(node --version)"
          echo "pnpm: $(pnpm --version)"
          echo "npm: $(npm --version)"
          echo "zx: $(npx zx --version)"

      - name: Build packages
        run: pnpm exec zx ./scripts/build.mjs

      - name: Setup npm authentication
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # 配置 npm 认证
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - name: Check and publish snapshot
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # 检查是否有需要发布的包
          if [[ -n "$(pnpm exec zx ./scripts/check-releases.mjs)" ]]; then
            echo "📦 Found packages to publish, creating snapshot version..."
            pnpm exec changeset version --snapshot beta
            pnpm exec changeset publish --tag beta --no-git-tag --snapshot
            echo "✅ Snapshot packages published successfully"
          else
            echo "ℹ️  No packages to publish"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-dist
          path: packages/*/dist
          retention-days: 7

  # 检查发布包任务 - publish 命令必须放在 CI 中才可被 hook 从而注入鉴权 token
  # 故发布相关命令没有抽离到 zx 脚本中
  check-releases-packages:
    runs-on: ubuntu-latest
    # 两种情况下运行：1. 手动触发选择 check-releases；2. push 到 main 分支
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.job_type == 'check-releases-packages' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Print job trigger info
        run: |
          echo "🎯 check-releases-packages 任务触发信息："
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger - Job type: ${{ github.event.inputs.job_type }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "Push trigger - Target branch: ${{ github.ref }}"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 获取完整的 git 历史，changeset 需要
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.15.4'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check releases packages
        run: |
          echo "🔍 开始检查需要发布的包..."
          echo "当前分支: ${{ github.ref }}"
          echo "触发事件: ${{ github.event_name }}"

          OUTPUT=$(pnpm exec zx ./scripts/check-releases.mjs)
          echo "📋 检查结果："
          echo "Script output: '$OUTPUT'"
          echo "Output length: ${#OUTPUT}"

          if [[ -n "$OUTPUT" ]]; then
            echo "⭐️ 即将发布以下 packages:"
            echo "$OUTPUT"
            echo "✅ 找到需要发布的包"
          else
            echo "❌ 没有找到需要发布的包"
            echo "💡 这可能意味着："
            echo "  - 没有 changesets 文件"
            echo "  - 所有变更已经发布"
            echo "  - changeset 配置有问题"
            exit 1
          fi

  # 生产环境包发布任务
  production-publish-pkg:
    runs-on: ubuntu-latest
    # 仅在手动触发且选择 production-publish-pkg 时运行（安全考虑，不自动发布生产版本）
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.job_type == 'production-publish-pkg' &&
      github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 获取完整的 git 历史，changeset 需要
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '9.15.4'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          git config --global user.email "yyxcoder@gmail.com"
          git config --global user.name "coderyyx"

      - name: Setup npm authentication
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # 配置 npm 认证
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - name: Build, version and publish packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          OUTPUT=$(pnpm exec zx ./scripts/check-releases.mjs)
          if [[ -n "$OUTPUT" ]]; then
            echo "📋 检测到需要发布的包："
            echo "$OUTPUT"
            echo ""
            echo "📦 构建包..."
            pnpm exec zx ./scripts/build.mjs

            echo "🔖 更新版本..."
            pnpm exec changeset version

            echo "🚀 发布包..."
            pnpm exec changeset publish

            echo "💾 提交版本变更..."
            pnpm exec zx ./scripts/commit-version.mjs

            echo "✅ 生产环境包发布完成"
          else
            echo "ℹ️  没有包需要发布"
          fi
